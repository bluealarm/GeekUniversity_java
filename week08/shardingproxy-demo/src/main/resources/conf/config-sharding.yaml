#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

######################################################################################################
# 
# Here you can configure the rules for the proxy.
# This example is configuration of sharding rule.
# 
######################################################################################################
#

# 逻辑数据库的名称
# schemaName: testproxy
#
#dataSourceCommon:
#  username: postgres
#  password: postgres
#  connectionTimeoutMilliseconds: 30000
#  idleTimeoutMilliseconds: 60000
#  maxLifetimeMilliseconds: 1800000
#  maxPoolSize: 50
#  minPoolSize: 1
#  maintenanceIntervalMilliseconds: 30000
#
# dataSources:
#  test0:
#    url: jdbc:mysql://127.0.0.1:3316/test0?serverTimezone=Asia/Shanghai&useSSL=false
#    username: root
#    password: 123456
#    connectionTimeoutMilliseconds: 30000
#    idleTimeoutMilliseconds: 60000
#    maxLifetimeMilliseconds: 1800000
#    maxPoolSize: 10
#  test1:
#    url: jdbc:mysql://127.0.0.1:3306/test1?serverTimezone=Asia/Shanghai&useSSL=false
#    username: root
#    password: 
#    connectionTimeoutMilliseconds: 30000
#    idleTimeoutMilliseconds: 60000
#    maxLifetimeMilliseconds: 1800000
#    maxPoolSize: 10
# rules:
# - !SHARDING
 # tables:
   #虚拟表
 #   test:
 #     actualDataNodes: test${0..1}.order${0..15}
 #     tableStrategy:
 #       standard:
 #         shardingColumn: id
 #         shardingAlgorithmName: order_inline
 #     keyGenerateStrategy:
 #       column: id
 #       keyGeneratorName: snowflake
 # defaultDatabaseStrategy:
 #   standard:
 #     shardingColumn: id
 #     shardingAlgorithmName: database_inline
 # defaultTableStrategy:
 #   none:
 
 # shardingAlgorithms:
   #分库规则
   # database_inline:
   #   type: INLINE
   #   props:
   #     algorithm-expression: test${id % 2}
   #分表规则    
 #   test_inline:
 #     type: INLINE
 #     props:
 #       algorithm-expression: order${id % 16}
 
 # keyGenerators:
 #   snowflake:
 #     type: SNOWFLAKE
 #     props:
 #       worker-id: 123

######################################################################################################
#
# If you want to connect to MySQL, you should manually copy MySQL driver to lib directory.
#
######################################################################################################

# 逻辑数据库的名称
schemaName: testproxy
#
#dataSourceCommon:
#  username: root
#  password:
#  connectionTimeoutMilliseconds: 30000
#  idleTimeoutMilliseconds: 60000
#  maxLifetimeMilliseconds: 1800000
#  maxPoolSize: 50
#  minPoolSize: 1
#  maintenanceIntervalMilliseconds: 30000
#
dataSources:
 ds_0:
   url: jdbc:mysql://127.0.0.1:3306/demo_ds_0?serverTimezone=Asia/Shanghai&useSSL=false
   username: root
   password: 123.abc
   connectionTimeoutMilliseconds: 30000
   idleTimeoutMilliseconds: 60000
   maxLifetimeMilliseconds: 1800000
   maxPoolSize: 10
 ds_1:
   url: jdbc:mysql://127.0.0.1:3307/demo_ds_1?serverTimezone=Asia/Shanghai&useSSL=false
   username: root
   password: 123.abc
   connectionTimeoutMilliseconds: 30000
   idleTimeoutMilliseconds: 60000
   maxLifetimeMilliseconds: 1800000
   maxPoolSize: 10
rules:
- !SHARDING
 tables:
   t_order:
     actualDataNodes: ds_${0..1}.t_order_${0..15}
     tableStrategy:
       standard:
         shardingColumn: order_id
         shardingAlgorithmName: t_order_inline
     keyGenerateStrategy:
       column: order_id
       keyGeneratorName: snowflake
#    t_order_item:
#      actualDataNodes: ds_${0..1}.t_order_item_${0..1}
#      tableStrategy:
#        standard:
#          shardingColumn: order_id
#          shardingAlgorithmName: t_order_item_inline
#      keyGenerateStrategy:
#        column: order_item_id
#        keyGeneratorName: snowflake
#  bindingTables:
#    - t_order,t_order_item
#  defaultDatabaseStrategy:
#    standard:
#      shardingColumn: user_id
#      shardingAlgorithmName: database_inline
#  defaultTableStrategy:
#    none:
#  
 shardingAlgorithms:
   database_inline:
     type: INLINE
     props:
       algorithm-expression: ds_${user_id % 2}
   t_order_inline:
     type: INLINE
     props:
       algorithm-expression: t_order_${order_id % 16}
#    t_order_item_inline:
#      type: INLINE
#      props:
#        algorithm-expression: t_order_item_${order_id % 2}
#  
 keyGenerators:
   snowflake:
     type: SNOWFLAKE
     props:
       worker-id: 123
